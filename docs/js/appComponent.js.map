{"version":3,"file":"js/appComponent.js","mappings":"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","sources":["webpack://screen-recorder/./src/Number.svelte","webpack://screen-recorder/./src/streams.ts","webpack://screen-recorder/./src/Recorder.ts","webpack://screen-recorder/./src/Switch.svelte","webpack://screen-recorder/./src/RecordSwitch.svelte","webpack://screen-recorder/./src/utils.ts","webpack://screen-recorder/./src/App.svelte"],"sourcesContent":["<script>\n  export let name = 'default';\n  export let value = parseInt(localStorage.getItem('number-' + name)) || 0;\n  $: {\n    value = Math.trunc(value);\n    if (value < min) value = min;\n    localStorage.setItem('number-' + name, value);\n  }\n  export let min = 0;\n  let id = Math.floor(Math.random() * 1000) + '-number';\n</script>\n\n<div class=\"container\">\n  <label for={id}>\n    <slot />\n  </label>\n  <button class=\"dec\" on:click={() => value--}>-</button>\n  <input type=\"number\" {id} bind:value {min} />\n  <button class=\"inc\" on:click={() => value++}>+</button>\n</div>\n\n<style>\n  .container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  button {\n    width: 2rem;\n    height: 100%;\n    padding: 0.5rem;\n    margin: 0;\n    border-radius: 0;\n    line-height: 1rem;\n    border: none;\n    transition: background-color 0.3s ease;\n    background-color: rgb(214, 214, 214);\n  }\n  button:hover {\n    background-color: rgb(155, 155, 155);\n  }\n  button:active {\n    background-color: rgb(102, 102, 102);\n  }\n  input {\n    width: 3rem;\n    border: none;\n    height: 1rem;\n    padding: 0.5rem;\n    margin: 0;\n    line-height: 1rem;\n    text-align: center;\n    background-color: rgb(214, 214, 214);\n  }\n  label {\n    margin: 1rem;\n  }\n\n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type='number'] {\n    -moz-appearance: textfield;\n  }\n</style>\n","import * as streamSaver from 'streamsaver';\nimport mitm from 'streamsaver/mitm.html';\nimport mitm_sw from 'streamsaver/sw.js?raw';\nif (!window.WritableStream) {\n  import('web-streams-polyfill/ponyfill/es2018').then(pfill => {\n    for (const key in pfill) {\n      if (Object.prototype.hasOwnProperty.call(pfill, key)) {\n        (window as any)[key] = (pfill as any)[key];\n      }\n    }\n    (streamSaver as any).WritableStream = pfill.WritableStream;\n    (streamSaver as any).TransformStream = pfill.TransformStream;\n  });\n}\n(window as any).sw_js = mitm_sw;\n(streamSaver as any).mitm = mitm;\nexport { streamSaver };\nexport function getBlobToUint8Stream() {\n  return new TransformStream<Blob, Uint8Array>({\n    async transform(chunk, controller) {\n      controller.enqueue(new Uint8Array(await chunk.arrayBuffer()));\n    },\n  });\n}\n","interface RecorderConfig {\n  systemAudio: boolean;\n  microphone: boolean;\n  timeslice?: number;\n}\nimport { getBlobToUint8Stream, streamSaver } from './streams';\nexport default class Recorder extends window.EventTarget {\n  config: RecorderConfig;\n  recorder: MediaRecorder;\n  rStream: MediaStream;\n  aDest: MediaStreamAudioDestinationNode;\n  aCtx: AudioContext;\n  writer?: WritableStreamDefaultWriter<Blob>;\n  state: 'idle' | 'gotPermissions' | 'error' | 'recording' | 'stopped' | 'stopping';\n  constructor(config: RecorderConfig) {\n    super();\n    this.config = config;\n    this.rStream = new MediaStream();\n    this.recorder = new MediaRecorder(this.rStream);\n    this.aCtx = new AudioContext();\n    this.aDest = this.aCtx.createMediaStreamDestination();\n    this.state = 'idle';\n  }\n  async requestScreen() {\n    const stream = await navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: true,\n    });\n    if (stream.getVideoTracks().length < 1) this.throwError('Unable to get video');\n    stream.getVideoTracks().forEach(trk => this.rStream.addTrack(trk));\n    if (this.config.systemAudio) this.config.systemAudio = stream.getAudioTracks().length > 0;\n    if (this.config.systemAudio) this.aCtx.createMediaStreamSource(stream).connect(this.aDest);\n    this.recorder.addEventListener('stop', e =>\n      setTimeout(e => stream.getTracks().forEach(trk => trk.stop()), 300)\n    );\n    stream.getVideoTracks()[0].addEventListener('ended', () => this.stop());\n  }\n  async requestMicrophone() {\n    if (!this.config.microphone) return;\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    this.config.microphone = stream.getAudioTracks().length > 0;\n    if (!this.config.microphone) return;\n    this.aCtx.createMediaStreamSource(stream!).connect(this.aDest);\n  }\n  async requestStreams() {\n    if (this.state !== 'idle') this.throwError('Recorder is not idle');\n    await this.requestScreen();\n    await this.requestMicrophone();\n    if (this.config.microphone || this.config.systemAudio)\n      this.aDest.stream.getAudioTracks().forEach(trk => this.rStream.addTrack(trk));\n    this.state = 'gotPermissions';\n    this.dispatchEvent(new Event('gotPermissions'));\n    return this.rStream;\n  }\n  saveStream() {\n    if (this.state !== 'gotPermissions') this.throwError(\"The recorder's state is invalid\");\n    const ext = this.recorder.mimeType.split(';')[0].split('/')[1] || 'webm';\n    const trns = getBlobToUint8Stream();\n    const writer = trns.writable.getWriter();\n    const saver = streamSaver.createWriteStream('output.' + ext);\n    trns.readable.pipeTo(saver);\n    this.recorder.addEventListener('dataavailable', e => writer.write(e.data));\n    this.recorder.addEventListener('stop', e =>\n      setTimeout(e => {\n        writer.close();\n        this.state = 'stopped';\n        this.dispatchEvent(new Event('stopped'));\n      }, 1000)\n    );\n    this.recorder.start(this.config.timeslice);\n    this.state = 'recording';\n  }\n  stop() {\n    if (this.state === 'recording') this.recorder.stop();\n    else this.throwError('Cannot stop recording');\n    this.state = 'stopping';\n    this.dispatchEvent(new Event('stopping'));\n  }\n  throwError(error: string) {\n    const err = new Error(error);\n    this.state = 'error';\n    const evnt: any = new Event('error');\n    evnt.error = err;\n    this.dispatchEvent(evnt);\n    throw err;\n  }\n}\n","<script>\n  export let value = false;\n  let id = Math.trunc(Math.random() * 1000) + '-switch';\n</script>\n\n<div class=\"container\">\n  <label class=\"switch\"\n    ><input type=\"checkbox\" {id} bind:checked={value} />\n    <div class=\"but\" />\n  </label>\n  <label for={id} class=\"txt\"><slot /></label>\n</div>\n\n<style>\n  .container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin: 0.3rem;\n  }\n  .switch input {\n    position: absolute;\n    opacity: 0;\n  }\n  .switch {\n    display: inline-block;\n    font-size: 20px; /* 1 */\n    height: 1rem;\n    width: 2rem;\n    background: #bdb9a6;\n    border-radius: 1rem;\n    padding: 2px;\n    margin: 0.2rem;\n  }\n  .switch .but {\n    height: 1rem;\n    width: 1rem;\n    border-radius: 1rem;\n    background: #fff;\n    box-shadow: 0 0.1rem 0.3rem rgba(0, 0, 0, 0.3);\n    transition: all 300ms;\n  }\n  .switch input:checked + .but {\n    transform: translate3d(100%, 0, 0);\n    background-color: #1f49a3;\n    box-shadow: 0 0 5px grey;\n  }\n  .txt {\n    margin: 0.2rem;\n  }\n</style>\n","<script>\n  export let recording = false;\n  export let toogle = () => {\n    recording = !recording;\n  };\n</script>\n\n<div class=\"container\">\n  <div class=\"ring\" on:click={toogle} class:recording>\n    <div class=\"innerdiv\" class:recording />\n  </div>\n</div>\n\n<style>\n  .innerdiv {\n    border-radius: 50%;\n    width: 3rem;\n    height: 3rem;\n    background-color: red;\n    transition: border-radius 0.3s ease-in-out;\n  }\n  .innerdiv.recording {\n    border-radius: 10%;\n    animation: scaleWaves 1s ease infinite;\n  }\n  .ring {\n    padding: 1rem;\n    border: 1rem;\n    border: solid 0.5rem red;\n    width: 3rem;\n    height: 3rem;\n    border-radius: 50%;\n    cursor: pointer;\n    margin: 2rem;\n  }\n  .ring.recording {\n    animation: waves 1s ease infinite;\n  }\n  @keyframes waves {\n    0% {\n      border: solid 0.5rem red;\n    }\n    50% {\n      border: solid 2rem rgba(255, 0, 0, 0);\n    }\n    51% {\n      border: solid 0.1rem rgba(255, 0, 0, 0);\n    }\n    75% {\n      border: solid 0.5rem red;\n    }\n    100% {\n      border: solid 0.5rem red;\n    }\n  }\n  @keyframes scaleWaves {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(0.9);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  .container {\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-height: 13rem;\n  }\n</style>\n","export async function wait(time: number = 1000): Promise<void> {\n  return new Promise(resolve => setTimeout(() => resolve(), time));\n}\nexport async function* countdown(times: number, delay: number = 1000) {\n  for (let i = 0; i <= times; i++) {\n    yield times - i;\n    if (times === i) break;\n    await wait(delay);\n  }\n}\n","<script lang=\"ts\">\n  import Number from './Number.svelte';\n  import Recorder from './Recorder';\n  import Switch from './Switch.svelte';\n  import RecordSwitch from './RecordSwitch.svelte';\n  import { fade } from 'svelte/transition';\n  import { countdown, wait } from './utils';\n\n  const oldState = JSON.parse(\n    localStorage.getItem('screen-recorder-app-state') ||\n      JSON.stringify({\n        systemAudio: true,\n        micAudio: false,\n        saveImediately: true,\n        timeOut: 5,\n      })\n  );\n  let vid: HTMLVideoElement;\n  let r: Recorder;\n  let systemAudio: boolean = oldState.systemAudio;\n  let micAudio: boolean = oldState.micAudio;\n  let saveImediately: boolean = oldState.saveImediately;\n  let timeOut: number = oldState.timeOut;\n  let recording = false;\n  let counter = 0;\n  let counting = false;\n  let stage = 0;\n  $: {\n    localStorage.setItem(\n      'screen-recorder-app-state',\n      JSON.stringify({\n        systemAudio,\n        micAudio,\n        saveImediately,\n        timeOut,\n      })\n    );\n  }\n  async function reset() {\n    recording = false;\n    stage = 0;\n  }\n  async function select() {\n    r = new Recorder({ microphone: micAudio, systemAudio, timeslice: 5000 });\n    r.addEventListener('stopping', reset);\n    r.addEventListener('error', reset);\n    (window as any).r = r;\n    vid.srcObject = r.rStream;\n    vid.play();\n    await r.requestStreams();\n    stage++;\n  }\n  async function toogle() {\n    if (recording) {\n      r.stop();\n    } else {\n      counting = true;\n      for await (let i of countdown(timeOut)) counter = i;\n      counting = false;\n      r.saveStream();\n      recording = true;\n      stage++;\n    }\n  }\n</script>\n\n<div class=\"vid\">\n  <!-- svelte-ignore a11y-media-has-caption -->\n  <video bind:this={vid} muted />\n</div>\n<div class=\"overlay\">\n  <div class=\"pannel\">\n    <div class=\"options\" class:hidden={stage !== 0}>\n      <Switch bind:value={systemAudio}>Record system audio</Switch>\n      <Switch bind:value={micAudio}>Record from microphone</Switch>\n      <Switch bind:value={saveImediately}>Save video while recroding (recomended)</Switch>\n      <button on:click={() => select()}>Select Screen</button>\n    </div>\n    <div class=\"countdown\" class:hidden={stage !== 1}>\n      <Number bind:value={timeOut}>Countdown</Number>\n    </div>\n    <div class=\"record\" class:hidden={stage !== 2 && stage !== 1}>\n      <RecordSwitch bind:recording {toogle} />\n    </div>\n  </div>\n  {#if counting}\n    <div transition:fade class=\"counter\">{counter}</div>\n  {/if}\n</div>\n\n<style>\n  :global(body) {\n    color: white;\n    background-color: #131313;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell,\n      'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n  :global(:root) {\n    font-size: 14px;\n  }\n  .vid {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    padding: 0;\n    margin: 0;\n    overflow: hidden;\n    /* background-color: green; */\n    z-index: -1;\n  }\n  .overlay {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    padding: 0;\n    margin: 0;\n    overflow: hidden;\n    z-index: 0;\n  }\n  .counter {\n    text-align: center;\n    font-size: 10rem;\n    line-height: 100%;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(48, 48, 48, 0.76);\n    position: absolute;\n    margin: auto;\n  }\n  .pannel {\n    background-color: rgba(37, 37, 37, 0.959);\n    padding: 2rem;\n    bottom: 0;\n    position: absolute;\n    margin: 2rem;\n    border-radius: 0.5rem;\n    overflow: hidden;\n  }\n  .pannel > div {\n    transition: max-height 0.7s ease;\n    max-height: 13rem;\n    overflow: hidden;\n  }\n  .pannel > .hidden {\n    max-height: 0px;\n    overflow: hidden;\n  }\n  video {\n    width: 100%;\n    height: 100%;\n  }\n  button {\n    padding: 0.7rem;\n    font-size: 1rem;\n    margin: 1rem;\n    border-radius: 0.5rem;\n    border: none;\n    background-color: rgb(214, 214, 214);\n    transition: background-color 0.3s ease;\n  }\n  button:hover {\n    background-color: rgb(141, 141, 141);\n  }\n  button:active {\n    background-color: rgb(75, 75, 75);\n  }\n</style>\n"],"names":["name","value","parseInt","localStorage","getItem","min","id","Math","floor","random","trunc","setItem","window","WritableStream","then","pfill","key","Object","prototype","hasOwnProperty","call","TransformStream","sw_js","mitm","Recorder","EventTarget","constructor","config","super","this","rStream","MediaStream","recorder","MediaRecorder","aCtx","AudioContext","aDest","createMediaStreamDestination","state","async","stream","navigator","mediaDevices","getDisplayMedia","video","audio","getVideoTracks","length","throwError","forEach","trk","addTrack","systemAudio","getAudioTracks","createMediaStreamSource","connect","addEventListener","e","setTimeout","getTracks","stop","microphone","getUserMedia","requestScreen","requestMicrophone","dispatchEvent","Event","saveStream","ext","mimeType","split","trns","chunk","controller","enqueue","Uint8Array","arrayBuffer","writer","writable","getWriter","saver","readable","pipeTo","write","data","close","start","timeslice","error","err","Error","evnt","recording","toogle","wait","time","Promise","resolve","oldState","JSON","parse","stringify","micAudio","saveImediately","timeOut","vid","r","counter","counting","stage","reset","select","srcObject","play","requestStreams","i","times","delay","countdown"],"sourceRoot":""}